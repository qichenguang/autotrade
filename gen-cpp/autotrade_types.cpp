/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "autotrade_types.h"

#include <algorithm>

namespace com { namespace autotrade { namespace zxtradesdk {

int _kZX_TRADE_ERROR_CODEValues[] = {
  ZX_TRADE_ERROR_CODE::ZX_TRADE_OK,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_LOAD_CONFIG_FILE_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_INIT_CONN_HANDLE_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_CONN_SERVER_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_ACCOUNT_LOGIN_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_SEARCH_STOCKHOLDER_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_SEARCH_FUND_MSG_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_RUN_NORMAL_ENTRUST_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_SERACH_ENTRUST_STATUS_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_RUN_UNDO_ENTRUST_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_ACCOUNT_PWD_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_OBJ_NOT_FIND_ERROR,
  ZX_TRADE_ERROR_CODE::ZX_TRADE_USE_EXCHANGE_TYPE_NOT_FIND_ACCOUNT_ERROR
};
const char* _kZX_TRADE_ERROR_CODENames[] = {
  "ZX_TRADE_OK",
  "ZX_TRADE_LOAD_CONFIG_FILE_ERROR",
  "ZX_TRADE_INIT_CONN_HANDLE_ERROR",
  "ZX_TRADE_CONN_SERVER_ERROR",
  "ZX_TRADE_ACCOUNT_LOGIN_ERROR",
  "ZX_TRADE_SEARCH_STOCKHOLDER_ERROR",
  "ZX_TRADE_SEARCH_FUND_MSG_ERROR",
  "ZX_TRADE_RUN_NORMAL_ENTRUST_ERROR",
  "ZX_TRADE_SERACH_ENTRUST_STATUS_ERROR",
  "ZX_TRADE_RUN_UNDO_ENTRUST_ERROR",
  "ZX_TRADE_ACCOUNT_PWD_ERROR",
  "ZX_TRADE_OBJ_NOT_FIND_ERROR",
  "ZX_TRADE_USE_EXCHANGE_TYPE_NOT_FIND_ACCOUNT_ERROR"
};
const std::map<int, const char*> _ZX_TRADE_ERROR_CODE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kZX_TRADE_ERROR_CODEValues, _kZX_TRADE_ERROR_CODENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ZxTradeAnsData::ascii_fingerprint = "30DE5DBEC93A12C7BBD19AC163917DD3";
const uint8_t ZxTradeAnsData::binary_fingerprint[16] = {0x30,0xDE,0x5D,0xBE,0xC9,0x3A,0x12,0xC7,0xBB,0xD1,0x9A,0xC1,0x63,0x91,0x7D,0xD3};

uint32_t ZxTradeAnsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;
  bool isset_ans_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ans_data.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->ans_data.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              {
                this->ans_data[_i4].clear();
                uint32_t _size5;
                ::apache::thrift::protocol::TType _ktype6;
                ::apache::thrift::protocol::TType _vtype7;
                xfer += iprot->readMapBegin(_ktype6, _vtype7, _size5);
                uint32_t _i9;
                for (_i9 = 0; _i9 < _size5; ++_i9)
                {
                  std::string _key10;
                  xfer += iprot->readString(_key10);
                  std::string& _val11 = this->ans_data[_i4][_key10];
                  xfer += iprot->readString(_val11);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_ans_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entrust_no);
          this->__isset.entrust_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ans_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ZxTradeAnsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ZxTradeAnsData");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ans_data", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->ans_data.size()));
    std::vector<std::map<std::string, std::string> > ::const_iterator _iter12;
    for (_iter12 = this->ans_data.begin(); _iter12 != this->ans_data.end(); ++_iter12)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter12).size()));
        std::map<std::string, std::string> ::const_iterator _iter13;
        for (_iter13 = (*_iter12).begin(); _iter13 != (*_iter12).end(); ++_iter13)
        {
          xfer += oprot->writeString(_iter13->first);
          xfer += oprot->writeString(_iter13->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.entrust_no) {
    xfer += oprot->writeFieldBegin("entrust_no", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->entrust_no);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ZxTradeAnsData &a, ZxTradeAnsData &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.ans_data, b.ans_data);
  swap(a.entrust_no, b.entrust_no);
  swap(a.__isset, b.__isset);
}

}}} // namespace
