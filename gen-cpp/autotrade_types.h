/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef autotrade_TYPES_H
#define autotrade_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace com { namespace autotrade { namespace zxtradesdk {

struct ZX_TRADE_ERROR_CODE {
  enum type {
    ZX_TRADE_OK = 0,
    ZX_TRADE_LOAD_CONFIG_FILE_ERROR = 1,
    ZX_TRADE_INIT_CONN_HANDLE_ERROR = 2,
    ZX_TRADE_CONN_SERVER_ERROR = 3,
    ZX_TRADE_ACCOUNT_LOGIN_ERROR = 4,
    ZX_TRADE_SEARCH_STOCKHOLDER_ERROR = 5,
    ZX_TRADE_SEARCH_FUND_MSG_ERROR = 6,
    ZX_TRADE_RUN_NORMAL_ENTRUST_ERROR = 7,
    ZX_TRADE_SERACH_ENTRUST_STATUS_ERROR = 8,
    ZX_TRADE_RUN_UNDO_ENTRUST_ERROR = 9,
    ZX_TRADE_ACCOUNT_PWD_ERROR = 21,
    ZX_TRADE_OBJ_NOT_FIND_ERROR = 22,
    ZX_TRADE_USE_EXCHANGE_TYPE_NOT_FIND_ACCOUNT_ERROR = 23
  };
};

extern const std::map<int, const char*> _ZX_TRADE_ERROR_CODE_VALUES_TO_NAMES;

typedef struct _ZxTradeAnsData__isset {
  _ZxTradeAnsData__isset() : entrust_no(false) {}
  bool entrust_no;
} _ZxTradeAnsData__isset;

class ZxTradeAnsData {
 public:

  static const char* ascii_fingerprint; // = "30DE5DBEC93A12C7BBD19AC163917DD3";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0xDE,0x5D,0xBE,0xC9,0x3A,0x12,0xC7,0xBB,0xD1,0x9A,0xC1,0x63,0x91,0x7D,0xD3};

  ZxTradeAnsData() : error_code(0), error_msg(), entrust_no() {
  }

  virtual ~ZxTradeAnsData() throw() {}

  int32_t error_code;
  std::string error_msg;
  std::vector<std::map<std::string, std::string> >  ans_data;
  std::string entrust_no;

  _ZxTradeAnsData__isset __isset;

  void __set_error_code(const int32_t val) {
    error_code = val;
  }

  void __set_error_msg(const std::string& val) {
    error_msg = val;
  }

  void __set_ans_data(const std::vector<std::map<std::string, std::string> > & val) {
    ans_data = val;
  }

  void __set_entrust_no(const std::string& val) {
    entrust_no = val;
    __isset.entrust_no = true;
  }

  bool operator == (const ZxTradeAnsData & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(ans_data == rhs.ans_data))
      return false;
    if (__isset.entrust_no != rhs.__isset.entrust_no)
      return false;
    else if (__isset.entrust_no && !(entrust_no == rhs.entrust_no))
      return false;
    return true;
  }
  bool operator != (const ZxTradeAnsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeAnsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ZxTradeAnsData &a, ZxTradeAnsData &b);

}}} // namespace

#endif
