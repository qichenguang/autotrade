<?php
namespace com\autotrade\zxtradesdk;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ZX_TRADE_ERROR_CODE {
  const ZX_TRADE_OK = 0;
  const ZX_TRADE_LOAD_CONFIG_FILE_ERROR = 1;
  const ZX_TRADE_INIT_CONN_HANDLE_ERROR = 2;
  const ZX_TRADE_CONN_SERVER_ERROR = 3;
  const ZX_TRADE_ACCOUNT_LOGIN_ERROR = 4;
  const ZX_TRADE_SEARCH_STOCKHOLDER_ERROR = 5;
  const ZX_TRADE_SEARCH_FUND_MSG_ERROR = 6;
  const ZX_TRADE_RUN_NORMAL_ENTRUST_ERROR = 7;
  const ZX_TRADE_SERACH_ENTRUST_STATUS_ERROR = 8;
  const ZX_TRADE_RUN_UNDO_ENTRUST_ERROR = 9;
  const ZX_TRADE_ACCOUNT_PWD_ERROR = 21;
  const ZX_TRADE_OBJ_NOT_FIND_ERROR = 22;
  const ZX_TRADE_USE_EXCHANGE_TYPE_NOT_FIND_ACCOUNT_ERROR = 23;
  static public $__names = array(
    0 => 'ZX_TRADE_OK',
    1 => 'ZX_TRADE_LOAD_CONFIG_FILE_ERROR',
    2 => 'ZX_TRADE_INIT_CONN_HANDLE_ERROR',
    3 => 'ZX_TRADE_CONN_SERVER_ERROR',
    4 => 'ZX_TRADE_ACCOUNT_LOGIN_ERROR',
    5 => 'ZX_TRADE_SEARCH_STOCKHOLDER_ERROR',
    6 => 'ZX_TRADE_SEARCH_FUND_MSG_ERROR',
    7 => 'ZX_TRADE_RUN_NORMAL_ENTRUST_ERROR',
    8 => 'ZX_TRADE_SERACH_ENTRUST_STATUS_ERROR',
    9 => 'ZX_TRADE_RUN_UNDO_ENTRUST_ERROR',
    21 => 'ZX_TRADE_ACCOUNT_PWD_ERROR',
    22 => 'ZX_TRADE_OBJ_NOT_FIND_ERROR',
    23 => 'ZX_TRADE_USE_EXCHANGE_TYPE_NOT_FIND_ACCOUNT_ERROR',
  );
}

class ZxTradeAnsData {
  static $_TSPEC;

  public $error_code = null;
  public $error_msg = null;
  public $ans_data = null;
  public $entrust_no = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ans_data',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        4 => array(
          'var' => 'entrust_no',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error_code'])) {
        $this->error_code = $vals['error_code'];
      }
      if (isset($vals['error_msg'])) {
        $this->error_msg = $vals['error_msg'];
      }
      if (isset($vals['ans_data'])) {
        $this->ans_data = $vals['ans_data'];
      }
      if (isset($vals['entrust_no'])) {
        $this->entrust_no = $vals['entrust_no'];
      }
    }
  }

  public function getName() {
    return 'ZxTradeAnsData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->ans_data = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = array();
              $_size6 = 0;
              $_ktype7 = 0;
              $_vtype8 = 0;
              $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
              for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
              {
                $key11 = '';
                $val12 = '';
                $xfer += $input->readString($key11);
                $xfer += $input->readString($val12);
                $elem5[$key11] = $val12;
              }
              $xfer += $input->readMapEnd();
              $this->ans_data []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entrust_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ZxTradeAnsData');
    if ($this->error_code !== null) {
      $xfer += $output->writeFieldBegin('error_code', TType::I32, 1);
      $xfer += $output->writeI32($this->error_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_msg !== null) {
      $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->error_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ans_data !== null) {
      if (!is_array($this->ans_data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ans_data', TType::LST, 3);
      {
        $output->writeListBegin(TType::MAP, count($this->ans_data));
        {
          foreach ($this->ans_data as $iter13)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter13));
              {
                foreach ($iter13 as $kiter14 => $viter15)
                {
                  $xfer += $output->writeString($kiter14);
                  $xfer += $output->writeString($viter15);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entrust_no !== null) {
      $xfer += $output->writeFieldBegin('entrust_no', TType::STRING, 4);
      $xfer += $output->writeString($this->entrust_no);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


