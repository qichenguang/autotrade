/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ZxTradeSdk_H
#define ZxTradeSdk_H

#include <thrift/TDispatchProcessor.h>
#include "autotrade_types.h"

namespace com { namespace autotrade { namespace zxtradesdk {

class ZxTradeSdkIf {
 public:
  virtual ~ZxTradeSdkIf() {}
  virtual void login(ZxTradeAnsData& _return, const std::string& account, const std::string& password) = 0;
  virtual void search_stockholder(ZxTradeAnsData& _return, const std::string& account) = 0;
  virtual void search_fund_msg(ZxTradeAnsData& _return, const std::string& account) = 0;
  virtual void run_normal_entrust(ZxTradeAnsData& _return, const std::string& account, const std::string& stock_code, const std::string& shorsz, const std::string& num, const std::string& price, const std::string& buyorsell) = 0;
  virtual void serach_entrust_status(ZxTradeAnsData& _return, const std::string& account, const std::string& entrust_no) = 0;
  virtual void run_undo_entrust(ZxTradeAnsData& _return, const std::string& account, const std::string& entrust_no) = 0;
};

class ZxTradeSdkIfFactory {
 public:
  typedef ZxTradeSdkIf Handler;

  virtual ~ZxTradeSdkIfFactory() {}

  virtual ZxTradeSdkIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ZxTradeSdkIf* /* handler */) = 0;
};

class ZxTradeSdkIfSingletonFactory : virtual public ZxTradeSdkIfFactory {
 public:
  ZxTradeSdkIfSingletonFactory(const boost::shared_ptr<ZxTradeSdkIf>& iface) : iface_(iface) {}
  virtual ~ZxTradeSdkIfSingletonFactory() {}

  virtual ZxTradeSdkIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ZxTradeSdkIf* /* handler */) {}

 protected:
  boost::shared_ptr<ZxTradeSdkIf> iface_;
};

class ZxTradeSdkNull : virtual public ZxTradeSdkIf {
 public:
  virtual ~ZxTradeSdkNull() {}
  void login(ZxTradeAnsData& /* _return */, const std::string& /* account */, const std::string& /* password */) {
    return;
  }
  void search_stockholder(ZxTradeAnsData& /* _return */, const std::string& /* account */) {
    return;
  }
  void search_fund_msg(ZxTradeAnsData& /* _return */, const std::string& /* account */) {
    return;
  }
  void run_normal_entrust(ZxTradeAnsData& /* _return */, const std::string& /* account */, const std::string& /* stock_code */, const std::string& /* shorsz */, const std::string& /* num */, const std::string& /* price */, const std::string& /* buyorsell */) {
    return;
  }
  void serach_entrust_status(ZxTradeAnsData& /* _return */, const std::string& /* account */, const std::string& /* entrust_no */) {
    return;
  }
  void run_undo_entrust(ZxTradeAnsData& /* _return */, const std::string& /* account */, const std::string& /* entrust_no */) {
    return;
  }
};

typedef struct _ZxTradeSdk_login_args__isset {
  _ZxTradeSdk_login_args__isset() : account(false), password(false) {}
  bool account;
  bool password;
} _ZxTradeSdk_login_args__isset;

class ZxTradeSdk_login_args {
 public:

  ZxTradeSdk_login_args() : account(), password() {
  }

  virtual ~ZxTradeSdk_login_args() throw() {}

  std::string account;
  std::string password;

  _ZxTradeSdk_login_args__isset __isset;

  void __set_account(const std::string& val) {
    account = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const ZxTradeSdk_login_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZxTradeSdk_login_pargs {
 public:


  virtual ~ZxTradeSdk_login_pargs() throw() {}

  const std::string* account;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_login_result__isset {
  _ZxTradeSdk_login_result__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_login_result__isset;

class ZxTradeSdk_login_result {
 public:

  ZxTradeSdk_login_result() {
  }

  virtual ~ZxTradeSdk_login_result() throw() {}

  ZxTradeAnsData success;

  _ZxTradeSdk_login_result__isset __isset;

  void __set_success(const ZxTradeAnsData& val) {
    success = val;
  }

  bool operator == (const ZxTradeSdk_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_login_presult__isset {
  _ZxTradeSdk_login_presult__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_login_presult__isset;

class ZxTradeSdk_login_presult {
 public:


  virtual ~ZxTradeSdk_login_presult() throw() {}

  ZxTradeAnsData* success;

  _ZxTradeSdk_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ZxTradeSdk_search_stockholder_args__isset {
  _ZxTradeSdk_search_stockholder_args__isset() : account(false) {}
  bool account;
} _ZxTradeSdk_search_stockholder_args__isset;

class ZxTradeSdk_search_stockholder_args {
 public:

  ZxTradeSdk_search_stockholder_args() : account() {
  }

  virtual ~ZxTradeSdk_search_stockholder_args() throw() {}

  std::string account;

  _ZxTradeSdk_search_stockholder_args__isset __isset;

  void __set_account(const std::string& val) {
    account = val;
  }

  bool operator == (const ZxTradeSdk_search_stockholder_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_search_stockholder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_search_stockholder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZxTradeSdk_search_stockholder_pargs {
 public:


  virtual ~ZxTradeSdk_search_stockholder_pargs() throw() {}

  const std::string* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_search_stockholder_result__isset {
  _ZxTradeSdk_search_stockholder_result__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_search_stockholder_result__isset;

class ZxTradeSdk_search_stockholder_result {
 public:

  ZxTradeSdk_search_stockholder_result() {
  }

  virtual ~ZxTradeSdk_search_stockholder_result() throw() {}

  ZxTradeAnsData success;

  _ZxTradeSdk_search_stockholder_result__isset __isset;

  void __set_success(const ZxTradeAnsData& val) {
    success = val;
  }

  bool operator == (const ZxTradeSdk_search_stockholder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_search_stockholder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_search_stockholder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_search_stockholder_presult__isset {
  _ZxTradeSdk_search_stockholder_presult__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_search_stockholder_presult__isset;

class ZxTradeSdk_search_stockholder_presult {
 public:


  virtual ~ZxTradeSdk_search_stockholder_presult() throw() {}

  ZxTradeAnsData* success;

  _ZxTradeSdk_search_stockholder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ZxTradeSdk_search_fund_msg_args__isset {
  _ZxTradeSdk_search_fund_msg_args__isset() : account(false) {}
  bool account;
} _ZxTradeSdk_search_fund_msg_args__isset;

class ZxTradeSdk_search_fund_msg_args {
 public:

  ZxTradeSdk_search_fund_msg_args() : account() {
  }

  virtual ~ZxTradeSdk_search_fund_msg_args() throw() {}

  std::string account;

  _ZxTradeSdk_search_fund_msg_args__isset __isset;

  void __set_account(const std::string& val) {
    account = val;
  }

  bool operator == (const ZxTradeSdk_search_fund_msg_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_search_fund_msg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_search_fund_msg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZxTradeSdk_search_fund_msg_pargs {
 public:


  virtual ~ZxTradeSdk_search_fund_msg_pargs() throw() {}

  const std::string* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_search_fund_msg_result__isset {
  _ZxTradeSdk_search_fund_msg_result__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_search_fund_msg_result__isset;

class ZxTradeSdk_search_fund_msg_result {
 public:

  ZxTradeSdk_search_fund_msg_result() {
  }

  virtual ~ZxTradeSdk_search_fund_msg_result() throw() {}

  ZxTradeAnsData success;

  _ZxTradeSdk_search_fund_msg_result__isset __isset;

  void __set_success(const ZxTradeAnsData& val) {
    success = val;
  }

  bool operator == (const ZxTradeSdk_search_fund_msg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_search_fund_msg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_search_fund_msg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_search_fund_msg_presult__isset {
  _ZxTradeSdk_search_fund_msg_presult__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_search_fund_msg_presult__isset;

class ZxTradeSdk_search_fund_msg_presult {
 public:


  virtual ~ZxTradeSdk_search_fund_msg_presult() throw() {}

  ZxTradeAnsData* success;

  _ZxTradeSdk_search_fund_msg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ZxTradeSdk_run_normal_entrust_args__isset {
  _ZxTradeSdk_run_normal_entrust_args__isset() : account(false), stock_code(false), shorsz(false), num(false), price(false), buyorsell(false) {}
  bool account;
  bool stock_code;
  bool shorsz;
  bool num;
  bool price;
  bool buyorsell;
} _ZxTradeSdk_run_normal_entrust_args__isset;

class ZxTradeSdk_run_normal_entrust_args {
 public:

  ZxTradeSdk_run_normal_entrust_args() : account(), stock_code(), shorsz(), num(), price(), buyorsell() {
  }

  virtual ~ZxTradeSdk_run_normal_entrust_args() throw() {}

  std::string account;
  std::string stock_code;
  std::string shorsz;
  std::string num;
  std::string price;
  std::string buyorsell;

  _ZxTradeSdk_run_normal_entrust_args__isset __isset;

  void __set_account(const std::string& val) {
    account = val;
  }

  void __set_stock_code(const std::string& val) {
    stock_code = val;
  }

  void __set_shorsz(const std::string& val) {
    shorsz = val;
  }

  void __set_num(const std::string& val) {
    num = val;
  }

  void __set_price(const std::string& val) {
    price = val;
  }

  void __set_buyorsell(const std::string& val) {
    buyorsell = val;
  }

  bool operator == (const ZxTradeSdk_run_normal_entrust_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(stock_code == rhs.stock_code))
      return false;
    if (!(shorsz == rhs.shorsz))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(buyorsell == rhs.buyorsell))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_run_normal_entrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_run_normal_entrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZxTradeSdk_run_normal_entrust_pargs {
 public:


  virtual ~ZxTradeSdk_run_normal_entrust_pargs() throw() {}

  const std::string* account;
  const std::string* stock_code;
  const std::string* shorsz;
  const std::string* num;
  const std::string* price;
  const std::string* buyorsell;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_run_normal_entrust_result__isset {
  _ZxTradeSdk_run_normal_entrust_result__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_run_normal_entrust_result__isset;

class ZxTradeSdk_run_normal_entrust_result {
 public:

  ZxTradeSdk_run_normal_entrust_result() {
  }

  virtual ~ZxTradeSdk_run_normal_entrust_result() throw() {}

  ZxTradeAnsData success;

  _ZxTradeSdk_run_normal_entrust_result__isset __isset;

  void __set_success(const ZxTradeAnsData& val) {
    success = val;
  }

  bool operator == (const ZxTradeSdk_run_normal_entrust_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_run_normal_entrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_run_normal_entrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_run_normal_entrust_presult__isset {
  _ZxTradeSdk_run_normal_entrust_presult__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_run_normal_entrust_presult__isset;

class ZxTradeSdk_run_normal_entrust_presult {
 public:


  virtual ~ZxTradeSdk_run_normal_entrust_presult() throw() {}

  ZxTradeAnsData* success;

  _ZxTradeSdk_run_normal_entrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ZxTradeSdk_serach_entrust_status_args__isset {
  _ZxTradeSdk_serach_entrust_status_args__isset() : account(false), entrust_no(false) {}
  bool account;
  bool entrust_no;
} _ZxTradeSdk_serach_entrust_status_args__isset;

class ZxTradeSdk_serach_entrust_status_args {
 public:

  ZxTradeSdk_serach_entrust_status_args() : account(), entrust_no() {
  }

  virtual ~ZxTradeSdk_serach_entrust_status_args() throw() {}

  std::string account;
  std::string entrust_no;

  _ZxTradeSdk_serach_entrust_status_args__isset __isset;

  void __set_account(const std::string& val) {
    account = val;
  }

  void __set_entrust_no(const std::string& val) {
    entrust_no = val;
  }

  bool operator == (const ZxTradeSdk_serach_entrust_status_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(entrust_no == rhs.entrust_no))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_serach_entrust_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_serach_entrust_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZxTradeSdk_serach_entrust_status_pargs {
 public:


  virtual ~ZxTradeSdk_serach_entrust_status_pargs() throw() {}

  const std::string* account;
  const std::string* entrust_no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_serach_entrust_status_result__isset {
  _ZxTradeSdk_serach_entrust_status_result__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_serach_entrust_status_result__isset;

class ZxTradeSdk_serach_entrust_status_result {
 public:

  ZxTradeSdk_serach_entrust_status_result() {
  }

  virtual ~ZxTradeSdk_serach_entrust_status_result() throw() {}

  ZxTradeAnsData success;

  _ZxTradeSdk_serach_entrust_status_result__isset __isset;

  void __set_success(const ZxTradeAnsData& val) {
    success = val;
  }

  bool operator == (const ZxTradeSdk_serach_entrust_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_serach_entrust_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_serach_entrust_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_serach_entrust_status_presult__isset {
  _ZxTradeSdk_serach_entrust_status_presult__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_serach_entrust_status_presult__isset;

class ZxTradeSdk_serach_entrust_status_presult {
 public:


  virtual ~ZxTradeSdk_serach_entrust_status_presult() throw() {}

  ZxTradeAnsData* success;

  _ZxTradeSdk_serach_entrust_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ZxTradeSdk_run_undo_entrust_args__isset {
  _ZxTradeSdk_run_undo_entrust_args__isset() : account(false), entrust_no(false) {}
  bool account;
  bool entrust_no;
} _ZxTradeSdk_run_undo_entrust_args__isset;

class ZxTradeSdk_run_undo_entrust_args {
 public:

  ZxTradeSdk_run_undo_entrust_args() : account(), entrust_no() {
  }

  virtual ~ZxTradeSdk_run_undo_entrust_args() throw() {}

  std::string account;
  std::string entrust_no;

  _ZxTradeSdk_run_undo_entrust_args__isset __isset;

  void __set_account(const std::string& val) {
    account = val;
  }

  void __set_entrust_no(const std::string& val) {
    entrust_no = val;
  }

  bool operator == (const ZxTradeSdk_run_undo_entrust_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(entrust_no == rhs.entrust_no))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_run_undo_entrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_run_undo_entrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZxTradeSdk_run_undo_entrust_pargs {
 public:


  virtual ~ZxTradeSdk_run_undo_entrust_pargs() throw() {}

  const std::string* account;
  const std::string* entrust_no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_run_undo_entrust_result__isset {
  _ZxTradeSdk_run_undo_entrust_result__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_run_undo_entrust_result__isset;

class ZxTradeSdk_run_undo_entrust_result {
 public:

  ZxTradeSdk_run_undo_entrust_result() {
  }

  virtual ~ZxTradeSdk_run_undo_entrust_result() throw() {}

  ZxTradeAnsData success;

  _ZxTradeSdk_run_undo_entrust_result__isset __isset;

  void __set_success(const ZxTradeAnsData& val) {
    success = val;
  }

  bool operator == (const ZxTradeSdk_run_undo_entrust_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ZxTradeSdk_run_undo_entrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZxTradeSdk_run_undo_entrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ZxTradeSdk_run_undo_entrust_presult__isset {
  _ZxTradeSdk_run_undo_entrust_presult__isset() : success(false) {}
  bool success;
} _ZxTradeSdk_run_undo_entrust_presult__isset;

class ZxTradeSdk_run_undo_entrust_presult {
 public:


  virtual ~ZxTradeSdk_run_undo_entrust_presult() throw() {}

  ZxTradeAnsData* success;

  _ZxTradeSdk_run_undo_entrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ZxTradeSdkClient : virtual public ZxTradeSdkIf {
 public:
  ZxTradeSdkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ZxTradeSdkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(ZxTradeAnsData& _return, const std::string& account, const std::string& password);
  void send_login(const std::string& account, const std::string& password);
  void recv_login(ZxTradeAnsData& _return);
  void search_stockholder(ZxTradeAnsData& _return, const std::string& account);
  void send_search_stockholder(const std::string& account);
  void recv_search_stockholder(ZxTradeAnsData& _return);
  void search_fund_msg(ZxTradeAnsData& _return, const std::string& account);
  void send_search_fund_msg(const std::string& account);
  void recv_search_fund_msg(ZxTradeAnsData& _return);
  void run_normal_entrust(ZxTradeAnsData& _return, const std::string& account, const std::string& stock_code, const std::string& shorsz, const std::string& num, const std::string& price, const std::string& buyorsell);
  void send_run_normal_entrust(const std::string& account, const std::string& stock_code, const std::string& shorsz, const std::string& num, const std::string& price, const std::string& buyorsell);
  void recv_run_normal_entrust(ZxTradeAnsData& _return);
  void serach_entrust_status(ZxTradeAnsData& _return, const std::string& account, const std::string& entrust_no);
  void send_serach_entrust_status(const std::string& account, const std::string& entrust_no);
  void recv_serach_entrust_status(ZxTradeAnsData& _return);
  void run_undo_entrust(ZxTradeAnsData& _return, const std::string& account, const std::string& entrust_no);
  void send_run_undo_entrust(const std::string& account, const std::string& entrust_no);
  void recv_run_undo_entrust(ZxTradeAnsData& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ZxTradeSdkProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ZxTradeSdkIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ZxTradeSdkProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search_stockholder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search_fund_msg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run_normal_entrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_serach_entrust_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run_undo_entrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ZxTradeSdkProcessor(boost::shared_ptr<ZxTradeSdkIf> iface) :
    iface_(iface) {
    processMap_["login"] = &ZxTradeSdkProcessor::process_login;
    processMap_["search_stockholder"] = &ZxTradeSdkProcessor::process_search_stockholder;
    processMap_["search_fund_msg"] = &ZxTradeSdkProcessor::process_search_fund_msg;
    processMap_["run_normal_entrust"] = &ZxTradeSdkProcessor::process_run_normal_entrust;
    processMap_["serach_entrust_status"] = &ZxTradeSdkProcessor::process_serach_entrust_status;
    processMap_["run_undo_entrust"] = &ZxTradeSdkProcessor::process_run_undo_entrust;
  }

  virtual ~ZxTradeSdkProcessor() {}
};

class ZxTradeSdkProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ZxTradeSdkProcessorFactory(const ::boost::shared_ptr< ZxTradeSdkIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ZxTradeSdkIfFactory > handlerFactory_;
};

class ZxTradeSdkMultiface : virtual public ZxTradeSdkIf {
 public:
  ZxTradeSdkMultiface(std::vector<boost::shared_ptr<ZxTradeSdkIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ZxTradeSdkMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ZxTradeSdkIf> > ifaces_;
  ZxTradeSdkMultiface() {}
  void add(boost::shared_ptr<ZxTradeSdkIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(ZxTradeAnsData& _return, const std::string& account, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(_return, account, password);
    }
    ifaces_[i]->login(_return, account, password);
    return;
  }

  void search_stockholder(ZxTradeAnsData& _return, const std::string& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search_stockholder(_return, account);
    }
    ifaces_[i]->search_stockholder(_return, account);
    return;
  }

  void search_fund_msg(ZxTradeAnsData& _return, const std::string& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search_fund_msg(_return, account);
    }
    ifaces_[i]->search_fund_msg(_return, account);
    return;
  }

  void run_normal_entrust(ZxTradeAnsData& _return, const std::string& account, const std::string& stock_code, const std::string& shorsz, const std::string& num, const std::string& price, const std::string& buyorsell) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run_normal_entrust(_return, account, stock_code, shorsz, num, price, buyorsell);
    }
    ifaces_[i]->run_normal_entrust(_return, account, stock_code, shorsz, num, price, buyorsell);
    return;
  }

  void serach_entrust_status(ZxTradeAnsData& _return, const std::string& account, const std::string& entrust_no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->serach_entrust_status(_return, account, entrust_no);
    }
    ifaces_[i]->serach_entrust_status(_return, account, entrust_no);
    return;
  }

  void run_undo_entrust(ZxTradeAnsData& _return, const std::string& account, const std::string& entrust_no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run_undo_entrust(_return, account, entrust_no);
    }
    ifaces_[i]->run_undo_entrust(_return, account, entrust_no);
    return;
  }

};

}}} // namespace

#endif
